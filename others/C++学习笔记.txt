C++学习笔记

2014-07-13 星期日
======================================================================
01-13
程序设计的基本知识点讲解
面向对象的思想

这部分，由于类似java，快速浏览一下就行

程序语言基本的语法


变量的存储类型
1 auto
2 register
3 extern
4 static

简单的输入，输出

#incldue <iostream.h>
int x = 5;
cout<<"x="<<x;

int x;
cin>>x;




2014-07-20 星期日
======================================================================
14 - 24

内联函数
  声明时使用关键字 inline、
  编译时在调用处用函数体进行替换，节省了参数传递，控制转移等开销

  注意：
   内联函数体内不能有 循环语句 和 switch 语句
   内联函数的声明必须出现在内联函数第一次被调用之前
   对内联函数不能进行异常接口声明


函数模版
  函数模版可以用来创建一个通用功能的函数
  以支持多种不同形参，进一步简化重载函数的函数体设计

  template <typename 标识符>
  函数声明

  int abs(int x) {
     return x<0 ? -x:x;
  }

  float abs(float x) {
     return x<0 ? -x:x; 
  }


  template<typename T>
  T abs(T x) {
     return x<0 ? -x:x;
  }



2014-07-24 星期四
======================================================================
25 - 28

面向对象的思想

C++类

class class_name
{
  public:
     public_xxx
  private:
     private_xx
  protected:
     protected_xx
}

构造函数
  拷贝构造函数
Class_name() {}


析构函数
  一些清理工作
  如果未声明析构函数，系统会自动产生一个缺省的析构函数

~Class_name() {}


前向引用声明


类模版
  template <class Type>



2014-08-05 星期二
======================================================================
29 - 30

前向引用声明

类模版
  template <class T>
  
  T class_name<T>::function_name()
  {

  }

  class_name<T> s1,s2;


UML (Unified Modeling Language)



2014-08-06 星期三
======================================================================
31 - 34

作用域与可见性

静态数据成员

静态成员函数


友元
   friend void function_name();




2014-08-10 星期日
======================================================================
35 - 43

友元函数
1 友元关系是不能传递的
2 友元关系是单向的


常类型
const double &d
A const a(3, 4);

void print() const;
const C c();
c.print();


A::A(int i):a(i),r(a){}


编译预处理，条件编译


数组，指针，字符串


void类型指针

指向类类型对象的指针


动态内存分配
new 
delete


2014-08-20 星期三
======================================================================
44 - 48
01 - 02

动态创建多维数组
函数指针


下部分的主要知识点：

继承与派生
访问控制
多态
虚函数
群体类
  线性群体
  容器类



公有继承
class class_name: public super_class {

}


私有继承
class class_name: private super_class {

}


保护继承
class class_name: protected super_class {

}

知道继承有这么三种，具体的区别，后面可以查资料


基类与派生类的对应关系
- 单继承
- 多继承
- 多重派生
- 多层派生

class class_name: super_class1, super_class2 {

}

class C : public A, private B {
  public:

  private:
     
}


2014-08-26 星期二
======================================================================
03 - 07

单继承
多继承
  构造函数，析构函数

同名覆盖原则
二义性问题
  虚函数


虚基类 virtural
   用于有共同基类的场合
声明
   以 virtual 修饰说明基类
   class B1 : virtual public B

修饰最远的基类


赋值兼容原则


多态性
   函数重载     静态
   运算符重载   静态
   虚函数       动态

运算符重载
   对已有的运算符赋予多重含义

实现机制
  将指定的运算表达式转化为对运算符函数的调用
  运算对象转化为运算符函数的实参

限制
  下列运算符不能重载
   . * :: ?:
  
  不改变原运算符的优先级，结合性

重载为类成员函数
友元函数

函数类型 operator 运算符 （形参） {

}

class_name operator + (class_name argc);


虚函数
纯虚函数
抽象类



2014-08-28 星期四
======================================================================
08 - 12

运算符成员函数的设计
运算符友元函数的设计


静态联编
   编译阶段

动态联编
    运行阶段


虚函数
   虚函数是动态联编的基础
   是非静态的成员函数
   函数原型 virtual
   virtual 只用来说明原型，不能用在函数实现时
   具有继承性
   本质：不是重载声明，而是覆盖

   调用方式：通过基类指针或引用，执行时会根据指针指向的对象的类，
   决定调用哪个函数


抽象类
   带有纯虚函数的类称为抽象类
   公共接口定义

   virtual 类型 函数名（参数表）= 0；
   纯虚函数

   作用
   保证派生类具有要求的行为

   抽象类只能作为基类使用

   类的成员函数才能说明为虚函数
   内联函数不能是虚函数
   构造函数不能使虚函数
   析构函数可以是虚函数，而且通常声明为虚函数



群体类
   线性群体的概念
   直接访问群体 - 数组类
   顺序访问群体 - 链表类
   栈类
   队列类

群体是指有多个数据元素组成的集合体
分类： 线性群体，非线性群体

线性群体群体中的元素按位置排列有序
非线性群体不用位置顺序来标识元素




2014-08-29 星期五
======================================================================
13 - 19

群体类
   首先要明白群体的概念
   
线性群体的概念
   直接访问
   顺序访问
   索引访问

静态数组
动态数组

主要讲了数组，链表，栈及他们的应用
略过


2014-08-30 星期六
======================================================================
20 - 

队列，循环队列

插入排序
选择排序
交换排序

顺序查找
折半查找


流类库与输入输出



C++ 学习结束
======================================================================
此项学习计划开始于 2014-07-13，结束于今天 2014-08-30
共历时 50 天左右

感觉不错，50 天也算一个比较长的时间段了
目前对 C++ 也算基本了解了，可以看懂一般的 C++ 代码，可以写简单的 C++ 代码，

已经足够了，达到了我预期的目标

不错，继续

不过需要明白：知识是学不完的，
需要学习的，要自己选择实用的，有利于目前的工作。或者将来的工作


























